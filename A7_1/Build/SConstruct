
from os import listdir
from os.path import isfile, join, abspath

common_env = Environment()
common_env.Append(CXXFLAGS = '-std=c++11 -Wall -g -O3')
common_env.Append(YACCFLAGS='-d')
common_env.Append(CFLAGS='-std=c11')

# get the source files for the catalog
srcDir = '../Main/Catalog/source'
catalogSrc = [abspath(join(srcDir, f)) for f in listdir(srcDir) if isfile(join(srcDir, f)) and f[-3:] == '.cc']

# get the source files for the buffer manager
srcDir = '../Main/BufferMgr/source'
bufferSrc = [abspath(join(srcDir, f)) for f in listdir(srcDir) if isfile(join(srcDir, f)) and f[-3:] == '.cc']

# get the source files for the record manager
srcDir = '../Main/Record/source'
recordSrc = [abspath(join(srcDir, f)) for f in listdir(srcDir) if isfile(join(srcDir, f)) and f[-3:] == '.cc']

# get the source files for the record manager
srcDir = '../Main/DatabaseTable/source'
tableSrc = [abspath(join(srcDir, f)) for f in listdir(srcDir) if isfile(join(srcDir, f)) and f[-3:] == '.cc']

# get the source files for the SQL parser 
srcDir = '../Main/SQL/source'
sqlSrc = [abspath(join(srcDir, f)) for f in listdir(srcDir) if isfile(join(srcDir, f)) and (f[-3:] == '.cc' or f[-2:] == '.y' or f[-2:] == '.l')]

# get the source files for the relational operators
srcDir = '../Main/RelOps/source'
relOpSrc = [abspath(join(srcDir, f)) for f in listdir(srcDir) if isfile(join(srcDir, f)) and (f[-3:] == '.cc' or f[-2:] == '.y' or f[-2:] == '.l')]

# get the headers paths
header_paths = Split("""
	'../Main/Catalog/headers'
	'../Main/BufferMgr/headers'
	'../Main/Qunit/headers'
	'../Main/Record/headers'
	'../Main/DatabaseTable/headers'
	'../Main/SQL/headers'
	'../Main/RelOps/headers'
""")

# adds header folders 
common_env.Append(CPPPATH = header_paths)

# Menu for selecting a specific build or all builds
# if the -c or --clean option is included, the script will clean up
# built and target files
ans=True
print("""
What do you want to build/clean?\n
1. Buffer unit tests
2. Record unit tests
3. Sort unit tests
4. B+-Tree unit tests
5. SQL Parser
6. Rel Op unit tests
7. Buffer unit tests for Clear (use clang++ compiler)
8. Record unit tests for Clear (use clang++ compiler)
9. Sort unit tests for Clear (use clang++ compiler)
10. B+-Tree unit tests for Clear (use clang++ compiler)
11. Rel Op unit tests for Clear (use clang++ compiler)
""")


print("\nOK, building sql compiler.")
common_env.Program ('bin/allUnitTest', ['../Main/All/main.cc', relOpSrc, tableSrc, sqlSrc, recordSrc, catalogSrc, bufferSrc])
